---
title: "Integrate Python and Google Sheets"
title-block-banner: '#001b3a'
format: 
    html: 
        toc-title: Contents
        toc: true
        toc-depth: 2
        toc-location: left
backgroundcolor: '#fafafa'
---


A step-by-step guide to connecting your Google Sheet with Python. You will need to:  
1. Create Google Developer Credentials  
2. Grant access to your Google Sheet using the credentials you created  
3. Connect to the sheet using Python


## Create Google Developer Credentials
  

Sign in [Google Cloud Console](https://console.cloud.google.com/). Once inside, look for a small button labeled **My First Project** with a downward arrow, located next to the search box at the top \
  
![](./pics/google-console.png) \
  
Click on this button to open a small window. In the top left corner of this window, select **New Project** \
  
![](./pics/new-project.png) \
  
Now enter your **Project name**. To maintain consistency across Python connections, you can use a single project rather than creating new ones for each project. I named mine `google-sheet-api`. You can also choose to rename the project ID if desired \ 
  
![](./pics/create-project.png) \
  
After naming your project, click **Create**. This action will lead you back to the home screen. At the top bar, select the project you've just created \
  
![](./pics/select-new-project.png) \
  
This ensures you're working within the correct project. Under **Quick access**, choose **APIs & Service** \  
  
![](./pics/api.png) \
  
If you have not enabled APIs, there will be a button **Enable APIs and Services** suggested on the screen. Click on this button \
  
![](./pics/enable-api.png) \ 
  
Now you'll be directed to the API Library. In the search box, type `google sheet api` \
  
![](./pics/ggs-api.png) \
  
Once located, click on **Google sheets API** then click **Enable**. This API enables both reading and writing to Google Sheets \ 
  
![](./pics/hit-enable.png) \
  
After enabling the API, you'll be directed to the monitoring board of your project. On the left-hand side, select **Credentials** \ 
  
![](./pics/create-credentials.png) \ 
  
Click **Create credentials** \
  
![](./pics/credentials.png) \
  
Depending on your data, platform, and access requirements, choose the access credential type that suits your needs. In this instance, I choose **Service account** \
  
Fill in **Service account name** and **Service account ID** then click **Done** \  
  
![](./pics/fill-in.png) \
  
You'll now find yourself on the Credentials board \
  
![](./pics/credentialboard.png) \
  
Under **Service Accounts** you'll see the new account you've just created. Click on the account and select **Key** to generate a new key \
  
![](./pics/create-key.png) \
  
Choose the .json format and click **Create** \
  
## Grant access to your Google Sheet using the credentials you created
  
This action generates a .json file, which is automatically saved on your computer. You can typically find this file in your Downloads folder \  
  
The .json file contains your API credentials, including the **client_email** \ 
  
![](./pics/client_email.png) \
  
Open your working Google Sheet. Click on the **Share** button and grant editing permission to the email associated with the **client_email** \
  
This ensures that Python can access the sheet via the API \
  
## Connect to the sheet using Python 
  

Create a function to authorize the Google API using the JSON file. You will need to install the following packages to authenticate the connection and read/write Google Sheets \
- oauth2client  
- df2gspread  
  
```{python}
#| code-fold: false
#| eval: true 
#| echo: true 

from pathlib import Path
from oauth2client.service_account import ServiceAccountCredentials
import gspread
def gg_authentication(
    google_key_file: Path
    ):
    scope = 'https://spreadsheets.google.com/feeds'
    credentials = ServiceAccountCredentials.from_json_keyfile_name(
        google_key_file, scope
    )
    gc = gspread.authorize(credentials)
    authenticate = {'gc': gc, 'credentials': credentials}
    return authenticate
```  

Create function to read Google Sheet \
  
```{python}
#| code-fold: false
#| eval: true 
#| echo: true 
import pandas as pd
import oauth2client
from df2gspread import gspread2df as g2d
def read_ggs(
    credentials: oauth2client.service_account.ServiceAccountCredentials,
    google_sheet_id: str,
    wks_name: str,
) -> pd.DataFrame:
    data = g2d.download(
        google_sheet_id,
        wks_name,
        col_names=True,
        row_names=False,
        credentials=credentials,
    )
    return data
```

In the Google Sheets link, you can easily find the sheet ID \
The format is *https://docs.google.com/spreadsheets/d/* + **sheet_id** + */edit#gid=0* \
  
Let's try to read [US house price google sheet](https://docs.google.com/spreadsheets/d/1DtbVGLPklK5itHgw4c9BD1HBZo05-bYf5dXzuFirF28/edit#gid=0) \
  

```{python}
#| code-fold: false
#| code-summary: "Show the code"
#| eval: true 
#| echo: true # Do show this chunk in the final rendered document
#| output: true

from pyprojroot import here
google_sheet_id = '1DtbVGLPklK5itHgw4c9BD1HBZo05-bYf5dXzuFirF28'
wks_name = 'https://www.properstar.com/united-states/house-price'
path = './keys/secret_key.json' # path to your credential file on local machine
gg_auth = gg_authentication(here(path))
data = read_ggs(
    gg_auth['credentials'],
    google_sheet_id,
    wks_name
)
data.head()
```

\   
